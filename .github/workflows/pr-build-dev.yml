name: PR Test and Build On Dev

on:
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    environment: dev

    ## 테스트용 MySQL 환경을 설정합니다.
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## resources 디렉토리 확인 및 생성, yml 설정
      - name: Setup application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
          echo "${{ secrets.TEST_APPLICATION_YML }}" > ./src/main/resources/application-test.yml
          echo "${{ secrets.DEV_APPLICATION_YML }}" > ./src/main/resources/application-dev.yml
        shell: bash

      ## firebase sdk 설정
      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "runninghi-firebase-adminsdk.json"
          json: ${{ secrets.FIREBASE_SDK }}

      ## firebase 디렉토리 생성 및 JSON 파일 이동
      - name: Move Firebase Config
        run: |
          mkdir -p ./src/main/resources/firebase
          mv ./runninghi-firebase-adminsdk.json ./src/main/resources/firebase/

      ## apple 설정
      - name: Setup Apple
        run: |
          mkdir -p ./src/main/resources/apple
          touch ./src/main/resources/apple/Apple_AuthKey.p8
          echo "${{ secrets.APPLE_AUTHKEY }}" > ./src/main/resources/apple/Apple_AuthKey.p8

      # Gradle 권한 설정 및 테스트 실행
      - name: Add permission to make gradlew executable
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew test --info --stacktrace
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.4.2
        with:
          arguments: build -Dspring.profiles.active=dev

      ## docker upload image
      - name: docker image build
        run: docker build --cache-from=type=local,src=/tmp/docker-cache -f Dockerfile-dev -t ${{ secrets.DOCKERHUB_USERNAME }}/runninghi-prod:${{ github.sha }} .

      # DockerHub Login
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub push
      - name: docker Hub push
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/runninghi-prod:${{ github.sha }}
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/runninghi-prod:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/runninghi-prod:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/runninghi-prod:latest
